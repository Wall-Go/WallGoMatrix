(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     50206,       1213]
NotebookOptionsPosition[     47966,       1171]
NotebookOutlinePosition[     48363,       1187]
CellTagsIndexPosition[     48320,       1184]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["JSON matrix elements functions", "Chapter",
 CellChangeTimes->{{3.936094541952407*^9, 
  3.9360945514600477`*^9}},ExpressionUUID->"d4cee3d9-922f-4399-8f69-\
c3158c962faf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"makeJsonMatrixElements", "::", "usage"}], "=", 
   "\"\<makeJsonMatrixElements[particles,parameters,results] converts a list \
of particle names {'Phi',...}, a list of particle parameters {g,...}, and a \
list of matrix elements results in the form {M[0,0,0,0]->g^4 s/t,...} to a \
JSON object in a standard format.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"makeJsonMatrixElements", "[", 
    RowBox[{"particles_", ",", "parameters_", ",", "results_"}], "]"}], ":=", 
   
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "particlesJson", ",", "matrixElementsJson", ",", "toString", ",", 
       "getRelevantParameters", ",", "replaceSpecials"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"toString", "[", "arg_", "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "arg", "]"}], ",", "arg", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"arg", ",", "InputForm"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"replaceSpecials", "[", "arg_", "]"}], ":=", 
       RowBox[{"StringReplace", "[", 
        RowBox[{"arg", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Pi\>\"", "->", "\"\<_pi\>\""}], ",", 
           RowBox[{"\"\<s\>\"", "->", "\"\<_s\>\""}], ",", 
           RowBox[{"\"\<t\>\"", "->", "\"\<_t\>\""}], ",", 
           RowBox[{"\"\<u\>\"", "->", "\"\<_u\>\""}]}], "}"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"getRelevantParameters", "[", "arg_", "]"}], ":=", 
       RowBox[{"Select", "[", 
        RowBox[{"parameters", ",", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"arg", ",", "#"}], "]"}], "]"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"particlesJson", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<index\>\"", "->", 
            RowBox[{"i", "-", "1"}]}], ",", 
           RowBox[{"\"\<name\>\"", "->", 
            RowBox[{"toString", "[", 
             RowBox[{"particles", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "|>"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "particles", "]"}]}], "}"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"matrixElementsJson", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"<|", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<externalParticles\>\"", "->", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
             RowBox[{
              RowBox[{"M", "[", "a__", "]"}], "->", 
              RowBox[{"List", "[", "a", "]"}]}]}], ",", 
            RowBox[{"\"\<parameters\>\"", "->", 
             RowBox[{"Map", "[", 
              RowBox[{"toString", ",", 
               RowBox[{"getRelevantParameters", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"\"\<expression\>\"", "->", 
             RowBox[{"replaceSpecials", "[", 
              RowBox[{"toString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}]}], "|>"}], 
          "&"}], ",", "results"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<particles\>\"", "->", "particlesJson"}], ",", 
         RowBox[{"\"\<matrixElements\>\"", "->", "matrixElementsJson"}]}], 
        "|>"}], "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.936089047991711*^9, 3.936089105947055*^9}, 
   3.93608920299623*^9, {3.936089550425977*^9, 3.9360895574846087`*^9}, {
   3.936089707515987*^9, 3.9360897085251513`*^9}, {3.936091630129938*^9, 
   3.936091645985826*^9}, {3.93609173449968*^9, 3.936091760961979*^9}, 
   3.9360961647508*^9, {3.936096257240717*^9, 3.936096274274175*^9}, {
   3.936096307022998*^9, 3.936096440203947*^9}, {3.936096797007083*^9, 
   3.936096837831218*^9}, 3.936097095821913*^9, {3.936097151213401*^9, 
   3.936097181213715*^9}},
 CellLabel->
  "In[970]:=",ExpressionUUID->"fab1d10f-1576-4d6d-a78f-36975bbfd7e3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testJsonMatrixElements", "::", "usage"}], "=", 
   "\"\<testJsonMatrixElements[json] tests if a JSON object is of the \
expected form for exporting matrix elements.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testJsonMatrixElements", "[", "json_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "testBool", ",", "returnString", ",", "nParticles", ",", 
      "expectedForm"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"testBool", "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{
     "returnString", "=", "\"\<Json object matches expected schema\>\""}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"checking", " ", "head"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "json", "]"}], "!=", "Association"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"returnString", "=", "\"\<Not Association\>\""}], ";", 
        RowBox[{"testBool", "=", "False"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"checking", " ", "dimensions"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Dimensions", "[", "json", "]"}], "!=", 
        RowBox[{"{", "2", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"returnString", "=", "\"\<Dimensions not {2}\>\""}], ";", 
        RowBox[{"testBool", "=", "False"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"checking", " ", "top", " ", "level", " ", "keys"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Keys", "[", "json", "]"}], "!=", 
        RowBox[{"{", 
         RowBox[{"\"\<particles\>\"", ",", "\"\<matrixElements\>\""}], 
         "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "returnString", "=", 
         "\"\<Top level keys not {'particles','matrixElements'}\>\""}], ";", 
        RowBox[{"testBool", "=", "False"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"checking", " ", "lower", " ", "level", " ", "keys"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Keys", "[", 
         RowBox[{
          RowBox[{"json", "[", "\"\<particles\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "!=", 
        RowBox[{"{", 
         RowBox[{"\"\<index\>\"", ",", "\"\<name\>\""}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "returnString", "=", 
         "\"\<'particles' keys not {'index','name'}\>\""}], ";", 
        RowBox[{"testBool", "=", "False"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Keys", "[", 
         RowBox[{
          RowBox[{"json", "[", "\"\<matrixElements\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "!=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<externalParticles\>\"", ",", "\"\<parameters\>\"", ",", 
          "\"\<expression\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "returnString", "=", 
         "\"\<'matrixElements' keys not \
{'externalParticles','parameters','expressions'}\>\""}], ";", 
        RowBox[{"testBool", "=", "False"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"returning", " ", "results"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"testBool", ",", " ", "returnString"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.936089680106508*^9, 3.936089700504274*^9}, {
  3.936089736091428*^9, 3.9360897494490643`*^9}, {3.936089816487438*^9, 
  3.936089888413012*^9}, {3.9360899752121053`*^9, 3.936090031159432*^9}, {
  3.936090071214324*^9, 3.936090563706572*^9}, {3.936090607062641*^9, 
  3.936090656996701*^9}, {3.936091003300454*^9, 3.936091025820986*^9}, {
  3.9360919175301037`*^9, 3.936091949792397*^9}, {3.936091997630917*^9, 
  3.936092108892219*^9}, {3.93609221058046*^9, 3.936092368832839*^9}, {
  3.936092407638093*^9, 3.936092414380731*^9}, {3.93609644864578*^9, 
  3.936096485157849*^9}, {3.9360971083658524`*^9, 3.936097117371284*^9}},
 CellLabel->
  "In[972]:=",ExpressionUUID->"12144d55-aa6f-4db0-aba9-ce4f1cc256aa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"splitJsonMatrixElements", "::", "usage"}], "=", 
   "\"\<splitJsonMatrixElements[json] splits a JSON object containing matrix \
elements into a list {particleNames,parameters,results}.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"splitJsonMatrixElements", "[", "json_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "particles", ",", "matrixElements", ",", "particleIndices", ",", 
       "particleNames", ",", "matrixElementIndices", ",", 
       "matrixElementParameters", ",", "matrixElementExpressions", ",", 
       "parameters", ",", "expressions", ",", "results"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"particles", "=", 
       RowBox[{"json", "[", "\"\<particles\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"particleIndices", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<index\>\"", "]"}], "&"}], ",", 
         RowBox[{"json", "[", "\"\<particles\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"particleNames", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<name\>\"", "]"}], "&"}], ",", 
         RowBox[{"json", "[", "\"\<particles\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matrixElements", "=", 
       RowBox[{"json", "[", "\"\<matrixElements\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matrixElementIndices", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<externalParticles\>\"", "]"}], "&"}], ",", 
         RowBox[{"json", "[", "\"\<matrixElements\>\"", "]"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"matrixElementParameters", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<parameters\>\"", "]"}], "&"}], ",", 
         RowBox[{"json", "[", "\"\<matrixElements\>\"", "]"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"matrixElementExpressions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<expression\>\"", "]"}], "&"}], ",", 
         RowBox[{"json", "[", "\"\<matrixElements\>\"", "]"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"parameters", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"ToExpression", ",", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", "matrixElementParameters", "]"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"expressions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"ToExpression", ",", 
         RowBox[{"StringReplace", "[", 
          RowBox[{"matrixElementExpressions", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"RegularExpression", "[", "\"\<(\\\\W)_s\>\"", "]"}], 
              "->", "\"\<$1s\>\""}], ",", 
             RowBox[{
              RowBox[{"RegularExpression", "[", "\"\<(\\\\W)_t\>\"", "]"}], 
              "->", "\"\<$1t\>\""}], ",", 
             RowBox[{
              RowBox[{"RegularExpression", "[", "\"\<(\\\\W)_u\>\"", "]"}], 
              "->", "\"\<$1u\>\""}]}], "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"results", "=", 
       RowBox[{"Thread", "[", 
        RowBox[{"matrixElementIndices", "->", "expressions"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"results", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"M", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "/.", 
             RowBox[{"List", "->", "Sequence"}]}], "]"}], "->", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", "results"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"particleNames", ",", "parameters", ",", "results"}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.936089227985668*^9, 3.936089253299176*^9}, {
   3.936089446983745*^9, 3.936089495507064*^9}, {3.936089540538909*^9, 
   3.936089580129982*^9}, 3.936089666414497*^9, 3.936089704609138*^9, {
   3.93609248680343*^9, 3.936092499960565*^9}, {3.936092536265222*^9, 
   3.936092591891831*^9}, {3.936092625602824*^9, 3.936092729331953*^9}, {
   3.936092763223641*^9, 3.936092890739587*^9}, {3.936092927625443*^9, 
   3.9360929314608984`*^9}, {3.936092974663987*^9, 3.93609297636897*^9}, {
   3.936093208294899*^9, 3.936093351819763*^9}, {3.936093393087875*^9, 
   3.936093469769319*^9}, {3.936093592705438*^9, 3.93609359372705*^9}, {
   3.936093631234764*^9, 3.936093631973566*^9}, {3.936093983519838*^9, 
   3.9360940154247427`*^9}, {3.936094672830639*^9, 3.936094709640566*^9}, {
   3.9360950096331*^9, 3.936095062346881*^9}, {3.9360964936332693`*^9, 
   3.936096551586762*^9}, {3.936096628624271*^9, 3.93609669087747*^9}, {
   3.9360971210299*^9, 3.936097122607249*^9}, {3.936100307907277*^9, 
   3.9361004797363577`*^9}, {3.936100517305382*^9, 3.9361005563728933`*^9}, {
   3.9361006471104517`*^9, 3.9361006621612587`*^9}},
 CellLabel->
  "In[974]:=",ExpressionUUID->"0d2f1c26-451e-432e-80e4-a53eb99b776d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"reading", " ", "JSON", " ", "matrix", " ", "elements"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"importJSONMatrixElements", "::", "usage"}], "=", 
     "\"\<importJSONMatrixElements[file] imports a JSON file of matrix \
elements into a JSON object.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"importJSONMatrixElements", "[", "file_", "]"}], ":=", 
     RowBox[{"Import", "[", 
      RowBox[{"fileImport", ",", "\"\<RawJSON\>\""}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.936089094416346*^9, 3.936089130773598*^9}, 
   3.936092434315743*^9, {3.936096725207269*^9, 3.93609676198247*^9}, {
   3.9360971273216143`*^9, 3.936097129783814*^9}},
 CellLabel->
  "In[976]:=",ExpressionUUID->"3a4aa3e6-c6ea-49ce-a298-dd235aee727a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"export", " ", "JSONMatrixElements"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"exportJsonMatrixElements", "::", "usage"}], "=", 
     "\"\<exportJsonMatrixElements[file,jsonMatrixElements] exports a JSON \
object of matrix elements into a JSON file.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"exportJsonMatrixElements", "[", 
      RowBox[{"file_", ",", "jsonMatrixElements_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "test", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"StringQ", "[", "file", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Print", "[", "\"\<File must be a string\>\"", "]"}], ";", 
           
           RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTake", "[", 
            RowBox[{"fileExport", ",", 
             RowBox[{"-", "5"}]}], "]"}], "!=", "\"\<.json\>\""}], ",", 
          RowBox[{
           RowBox[{"Print", "[", "\"\<File must end in .json\>\"", "]"}], ";", 
           RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Export", "[", 
         RowBox[{"file", ",", "jsonMatrixElements"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.936094182454076*^9, 3.936094296416737*^9}, {
  3.936094367814376*^9, 3.936094377518215*^9}, {3.936094431147162*^9, 
  3.93609446210148*^9}, {3.93609449672549*^9, 3.936094502095642*^9}, {
  3.9360967670028877`*^9, 3.9360967822584257`*^9}, {3.936097133166625*^9, 
  3.936097134719686*^9}},
 CellLabel->
  "In[978]:=",ExpressionUUID->"8c78f50c-5873-4920-a9c5-82a7bd00e8cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["An example", "Chapter",
 CellChangeTimes->{{3.936094534483309*^9, 
  3.936094536006946*^9}},ExpressionUUID->"6dd4f171-5a9f-4355-9da9-\
32e945bc7a08"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "files", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"model", "=", "\"\<u1-higgs-yukawa\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fileImport", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"model", ",", "\"\<.json\>\""}], "]"}]}], "}"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fileExport", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"model", ",", "\"\<_alt\>\"", ",", "\"\<.json\>\""}], 
         "]"}]}], "}"}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.936089146822781*^9, 3.936089174649638*^9}, {
  3.936089274459944*^9, 3.936089301096574*^9}, {3.936089395208055*^9, 
  3.936089397142082*^9}, {3.936096854241781*^9, 3.9360968546317883`*^9}},
 CellLabel->
  "In[980]:=",ExpressionUUID->"84bb5015-92af-4f45-b8ac-8941847d11c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "importing", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"importedJson", "=", 
    RowBox[{"importJSONMatrixElements", "[", "fileImport", "]"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.9360891868830333`*^9, 3.9360891960180893`*^9}, {
   3.936089257212104*^9, 3.9360892700239353`*^9}, {3.93608932273308*^9, 
   3.936089359619878*^9}, 3.936094156437851*^9},
 CellLabel->
  "In[983]:=",ExpressionUUID->"c53bab39-7bcd-4dd1-a0a1-1326c983584a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"testing", " ", "import"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"testJsonMatrixElements", "[", "importedJson", "]"}]}]], "Input",
 CellChangeTimes->{{3.936089532631476*^9, 3.936089535011401*^9}, {
  3.936089591140878*^9, 3.936089661275493*^9}, {3.936094072151021*^9, 
  3.936094107947744*^9}, {3.93609415344407*^9, 3.936094154320962*^9}},
 CellLabel->
  "In[984]:=",ExpressionUUID->"c3617e57-6c49-48a8-b376-6334fda372e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "\<\"Json object matches expected schema\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.936089535369538*^9, {3.93608959933446*^9, 3.936089657523803*^9}, {
   3.936094079592955*^9, 3.936094158942601*^9}, 3.936094556137189*^9, 
   3.936095069366747*^9, {3.936096844487102*^9, 3.93609685728323*^9}, 
   3.936097136840436*^9, {3.936097178860806*^9, 3.936097182430583*^9}, {
   3.936100316518724*^9, 3.9361003682397137`*^9}, {3.936100413014587*^9, 
   3.936100483811315*^9}, 3.936100559724276*^9, 3.936100607978485*^9, {
   3.936100648093833*^9, 3.9361006633364353`*^9}},
 CellLabel->
  "Out[984]=",ExpressionUUID->"2900619d-642f-45b6-ba2e-c61a04ea6c13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"splitting", " ", "up", " ", "import"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"particles", ",", "parameters", ",", "matrixElements"}], "}"}], 
     "=", 
     RowBox[{"splitJsonMatrixElements", "[", "importedJson", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "particles", "\[IndentingNewLine]", "parameters", 
   "\[IndentingNewLine]", 
   RowBox[{"matrixElements", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.93609408051668*^9, 3.936094161563623*^9}, {
  3.936096702587744*^9, 3.936096709142372*^9}},
 CellLabel->
  "In[985]:=",ExpressionUUID->"d472d2a6-738e-4752-8342-0b011a6cbff0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Phi\"\>", ",", "\<\"Phibar\"\>", ",", "\<\"Chi\"\>", 
   ",", "\<\"Psi\"\>", ",", "\<\"Psibar\"\>", ",", "\<\"Xi\"\>", 
   ",", "\<\"Xibar\"\>", ",", "\<\"A\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.936096709622428*^9, {3.936096844494713*^9, 3.936096857291808*^9}, 
   3.936097136847817*^9, {3.936097178868613*^9, 3.9360971824383297`*^9}, {
   3.936100316526963*^9, 3.936100368248708*^9}, {3.9361004130435658`*^9, 
   3.936100455902308*^9}, 3.9361005597330933`*^9, 3.936100607986533*^9, {
   3.936100648102705*^9, 3.936100663344226*^9}},
 CellLabel->
  "Out[986]=",ExpressionUUID->"e7ca616e-8eb6-4232-882c-732ee11bfd2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a1", ",", "g", ",", "lam", ",", "a2", ",", "b3", ",", "y", ",", "b4"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.936096709622428*^9, {3.936096844494713*^9, 3.936096857291808*^9}, 
   3.936097136847817*^9, {3.936097178868613*^9, 3.9360971824383297`*^9}, {
   3.936100316526963*^9, 3.936100368248708*^9}, {3.9361004130435658`*^9, 
   3.936100455902308*^9}, 3.9361005597330933`*^9, 3.936100607986533*^9, {
   3.936100648102705*^9, 3.936100663344927*^9}},
 CellLabel->
  "Out[987]=",ExpressionUUID->"e94b436f-c0b1-438d-88ab-e060b45f5012"],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", "[", 
   RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "]"}], "\[Rule]", 
  RowBox[{
   RowBox[{"16", " ", 
    SuperscriptBox["lam", "2"]}], "+", 
   FractionBox[
    RowBox[{
     SuperscriptBox["a1", "4"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"t", "+", "u"}], ")"}], "2"]}], 
    RowBox[{"16", " ", 
     SuperscriptBox["t", "2"], " ", 
     SuperscriptBox["u", "2"]}]], "+", 
   FractionBox[
    RowBox[{"8", " ", 
     SuperscriptBox["g", "2"], " ", "lam", " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["t", "2"], "+", 
       SuperscriptBox["u", "2"], "-", 
       RowBox[{"s", " ", 
        RowBox[{"(", 
         RowBox[{"t", "+", "u"}], ")"}]}]}], ")"}]}], 
    RowBox[{"t", " ", "u"}]], "+", 
   FractionBox[
    RowBox[{
     SuperscriptBox["g", "4"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["t", "2"], "+", 
        SuperscriptBox["u", "2"], "-", 
        RowBox[{"s", " ", 
         RowBox[{"(", 
          RowBox[{"t", "+", "u"}], ")"}]}]}], ")"}], "2"]}], 
    RowBox[{
     SuperscriptBox["t", "2"], " ", 
     SuperscriptBox["u", "2"]}]], "+", 
   RowBox[{
    SuperscriptBox["a1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "lam", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox["1", "t"], "+", 
         FractionBox["1", "u"]}], ")"}]}], "+", 
      FractionBox[
       RowBox[{
        SuperscriptBox["g", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"t", "+", "u"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["t", "2"], "+", 
          SuperscriptBox["u", "2"], "-", 
          RowBox[{"s", " ", 
           RowBox[{"(", 
            RowBox[{"t", "+", "u"}], ")"}]}]}], ")"}]}], 
       RowBox[{"2", " ", 
        SuperscriptBox["t", "2"], " ", 
        SuperscriptBox["u", "2"]}]]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{
  3.936096709622428*^9, {3.936096844494713*^9, 3.936096857291808*^9}, 
   3.936097136847817*^9, {3.936097178868613*^9, 3.9360971824383297`*^9}, {
   3.936100316526963*^9, 3.936100368248708*^9}, {3.9361004130435658`*^9, 
   3.936100455902308*^9}, 3.9361005597330933`*^9, 3.936100607986533*^9, {
   3.936100648102705*^9, 3.936100663345482*^9}},
 CellLabel->
  "Out[988]=",ExpressionUUID->"05b5ff71-04d9-468f-9ec5-5021be32ab84"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"putting", " ", "back", " ", "as", " ", "a", " ", "json"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"toExportJson", "=", 
    RowBox[{"makeJsonMatrixElements", "[", 
     RowBox[{"particles", ",", "parameters", ",", "matrixElements"}], "]"}]}],
    ";"}]}]], "Input",
 CellChangeTimes->{{3.936094144467042*^9, 3.936094192285391*^9}, {
  3.9360944532973843`*^9, 3.936094486480536*^9}, {3.936096562139869*^9, 
  3.936096570058916*^9}},
 CellLabel->
  "In[989]:=",ExpressionUUID->"5087bd81-e0b9-496e-8fce-4c9d3adf5178"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "exporting", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"exportJsonMatrixElements", "[", 
    RowBox[{"fileExport", ",", "toExportJson"}], "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.936089309265598*^9, 3.936089368519313*^9}, 
   3.936089720978679*^9, 3.936094194084722*^9, {3.9360944552981367`*^9, 
   3.936094473981205*^9}, 3.9360950747220383`*^9, 3.9360968497813997`*^9},
 CellLabel->
  "In[990]:=",ExpressionUUID->"7805864e-00fa-4328-a00e-98161d9b9619"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "makeJsonMatrixElements"}]], "Input",
 CellChangeTimes->{{3.936097138675395*^9, 3.936097141842853*^9}},
 CellLabel->
  "In[991]:=",ExpressionUUID->"bb964e2d-02a5-4dbb-ba51-020fc2deebb2"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"makeJsonMatrixElements[particles,parameters,results]\
 converts a list of particle names {'Phi',...}, a list of particle parameters \
{g,...}, and a list of matrix elements results in the form {M[0,0,0,0]->g^4 \
s/t,...} to a JSON object in a standard format.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"makeJsonMatrixElements", "[", 
                    
                    RowBox[{
                    "particles_", ",", "parameters_", ",", "results_"}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"particlesJson", ",", "matrixElementsJson", ",", 
                    "toString", ",", "getRelevantParameters", ",", 
                    "replaceSpecials"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"toString", "[", "arg_", "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"StringQ", "[", "arg", "]"}], ",", "arg", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"arg", ",", "InputForm"}], "]"}]}], "]"}]}], ";", 
                    
                    RowBox[{
                    RowBox[{"replaceSpecials", "[", "arg_", "]"}], ":=", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{"arg", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"Pi\"", "\[Rule]", "\"_pi\""}], ",", 
                    RowBox[{"\"s\"", "\[Rule]", "\"_s\""}], ",", 
                    RowBox[{"\"t\"", "\[Rule]", "\"_t\""}], ",", 
                    RowBox[{"\"u\"", "\[Rule]", "\"_u\""}]}], "}"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"getRelevantParameters", "[", "arg_", "]"}], ":=", 
                    RowBox[{"Select", "[", 
                    RowBox[{"parameters", ",", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"arg", ",", "#1"}], "]"}]}], "&"}]}], "]"}]}], 
                    ";", 
                    RowBox[{"particlesJson", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"index\"", "\[Rule]", 
                    RowBox[{"i", "-", "1"}]}], ",", 
                    RowBox[{"\"name\"", "\[Rule]", 
                    RowBox[{"toString", "[", 
                    
                    RowBox[{"particles", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "particles", "]"}]}], "}"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"matrixElementsJson", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"\"externalParticles\"", "\[Rule]", 
                    
                    RowBox[{"#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"M", "[", "a__", "]"}], "\[Rule]", 
                    RowBox[{"{", "a", "}"}]}]}], ",", 
                    RowBox[{"\"parameters\"", "\[Rule]", 
                    RowBox[{"toString", "/@", 
                    RowBox[{"getRelevantParameters", "[", 
                    
                    RowBox[{"#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "]"}]}]}], ",", 
                    RowBox[{"\"expression\"", "\[Rule]", 
                    RowBox[{"replaceSpecials", "[", 
                    RowBox[{"toString", "[", 
                    
                    RowBox[{"#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "]"}], "]"}]}]}], "]"}], "&"}],
                     ")"}], "/@", "results"}]}], ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"particles\"", "\[Rule]", "particlesJson"}], 
                    ",", 
                    
                    RowBox[{"\"matrixElements\"", "\[Rule]", 
                    "matrixElementsJson"}]}], "]"}], "]"}]}]}], "]"}]}]}, {
                   " "}, {
                    RowBox[{
                    RowBox[{"makeJsonMatrixElements", "[", 
                    RowBox[{"file_", ",", "jsonMatrixElements"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "test", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"StringQ", "[", "file", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Print", "[", "\"File must be a string\"", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"fileExport", ",", 
                    RowBox[{"-", "5"}]}], "]"}], "\[NotEqual]", "\"json\""}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Print", "[", "\"File must end in .json\"", "]"}],
                     ";", 
                    RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"Export", "[", 
                    RowBox[{"file", ",", "jsonMatrixElements"}], "]"}]}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"makeJsonMatrixElements", "[", 
                    RowBox[{"file_", ",", "jsonMatrixElements_"}], "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "test", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"StringQ", "[", "file", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Print", "[", "\"File must be a string\"", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"fileExport", ",", 
                    RowBox[{"-", "5"}]}], "]"}], "\[NotEqual]", "\"json\""}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Print", "[", "\"File must end in .json\"", "]"}],
                     ";", 
                    RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"Export", "[", 
                    RowBox[{"file", ",", "jsonMatrixElements"}], "]"}]}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`makeJsonMatrixElements\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"makeJsonMatrixElements[particles,parameters,results]\
 converts a list of particle names {'Phi',...}, a list of particle parameters \
{g,...}, and a list of matrix elements results in the form {M[0,0,0,0]->g^4 \
s/t,...} to a JSON object in a standard format.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "makeJsonMatrixElements[particles,parameters,results] converts a list of \
particle names {'Phi',...}, a list of particle parameters {g,...}, and a list \
of matrix elements results in the form {M[0,0,0,0]->g^4 s/t,...} to a JSON \
object in a standard format.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`makeJsonMatrixElements, \
{$CellContext`makeJsonMatrixElements[
         Pattern[$CellContext`particles, 
          Blank[]], 
         Pattern[$CellContext`parameters, 
          Blank[]], 
         Pattern[$CellContext`results, 
          Blank[]]] :> 
       Module[{$CellContext`particlesJson, $CellContext`matrixElementsJson, \
$CellContext`toString, $CellContext`getRelevantParameters, \
$CellContext`replaceSpecials}, $CellContext`toString[
            Pattern[$CellContext`arg, 
             Blank[]]] := If[
            StringQ[$CellContext`arg], $CellContext`arg, 
            
            ToString[$CellContext`arg, 
             InputForm]]; $CellContext`replaceSpecials[
            Pattern[$CellContext`arg, 
             Blank[]]] := 
          StringReplace[$CellContext`arg, {
            "Pi" -> "_pi", "s" -> "_s", "t" -> "_t", "u" -> 
             "_u"}]; $CellContext`getRelevantParameters[
            Pattern[$CellContext`arg, 
             Blank[]]] := Select[$CellContext`parameters, Not[
             FreeQ[$CellContext`arg, #]]& ]; $CellContext`particlesJson = 
          Table[<|"index" -> $CellContext`i - 1, 
             "name" -> $CellContext`toString[
               
               Part[$CellContext`particles, $CellContext`i]]|>, \
{$CellContext`i, 1, 
             
             Length[$CellContext`particles]}]; \
$CellContext`matrixElementsJson = Map[<|
             ReplaceAll["externalParticles" -> Part[#, 1], $CellContext`M[
                Pattern[$CellContext`a, 
                 BlankSequence[]]] -> {$CellContext`a}], "parameters" -> 
             Map[$CellContext`toString, 
               $CellContext`getRelevantParameters[
                Part[#, 2]]], "expression" -> $CellContext`replaceSpecials[
               $CellContext`toString[
                Part[#, 2]]]|>& , $CellContext`results]; 
         Return[<|"particles" -> $CellContext`particlesJson, 
            "matrixElements" -> $CellContext`matrixElementsJson|>]], \
$CellContext`makeJsonMatrixElements[
         Pattern[$CellContext`file, 
          Blank[]], $CellContext`jsonMatrixElements] :> 
       Module[{$CellContext`test}, If[
           Not[
            StringQ[$CellContext`file]], Print["File must be a string"]; 
           Return[]]; 
         If[StringTake[$CellContext`fileExport, -5] != "json", 
           Print["File must end in .json"]; Return[]]; 
         Export[$CellContext`file, $CellContext`jsonMatrixElements]], \
$CellContext`makeJsonMatrixElements[
         Pattern[$CellContext`file, 
          Blank[]], 
         Pattern[$CellContext`jsonMatrixElements, 
          Blank[]]] :> Module[{$CellContext`test}, If[
           Not[
            StringQ[$CellContext`file]], Print["File must be a string"]; 
           Return[]]; 
         If[StringTake[$CellContext`fileExport, -5] != "json", 
           Print["File must end in .json"]; Return[]]; 
         Export[$CellContext`file, $CellContext`jsonMatrixElements]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`makeJsonMatrixElements"|>, False]]], "Output",
 CellChangeTimes->{{3.936097142225292*^9, 3.936097182480542*^9}, {
   3.936100316572419*^9, 3.936100368289554*^9}, {3.9361004130960207`*^9, 
   3.936100455943241*^9}, 3.936100559773857*^9, 3.936100608030881*^9, {
   3.9361006481527243`*^9, 3.936100663390729*^9}},
 CellLabel->
  "Out[991]=",ExpressionUUID->"5baf63fd-1c55-4566-ad2c-c1eb91108152"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1728, 1051},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.0 for Mac OS X ARM (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"45410cd7-8ceb-4ff2-8b18-2e5699ead87d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 177, 3, 69, "Chapter",ExpressionUUID->"d4cee3d9-922f-4399-8f69-c3158c962faf"],
Cell[760, 27, 4429, 104, 220, "Input",ExpressionUUID->"fab1d10f-1576-4d6d-a78f-36975bbfd7e3"],
Cell[5192, 133, 4609, 112, 451, "Input",ExpressionUUID->"12144d55-aa6f-4db0-aba9-ce4f1cc256aa"],
Cell[9804, 247, 5440, 121, 346, "Input",ExpressionUUID->"0d2f1c26-451e-432e-80e4-a53eb99b776d"],
Cell[15247, 370, 880, 21, 73, "Input",ExpressionUUID->"3a4aa3e6-c6ea-49ce-a298-dd235aee727a"],
Cell[16130, 393, 1958, 48, 157, "Input",ExpressionUUID->"8c78f50c-5873-4920-a9c5-82a7bd00e8cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18125, 446, 155, 3, 69, "Chapter",ExpressionUUID->"6dd4f171-5a9f-4355-9da9-32e945bc7a08"],
Cell[18283, 451, 1148, 29, 94, "Input",ExpressionUUID->"84bb5015-92af-4f45-b8ac-8941847d11c0"],
Cell[19434, 482, 505, 11, 52, "Input",ExpressionUUID->"c53bab39-7bcd-4dd1-a0a1-1326c983584a"],
Cell[CellGroupData[{
Cell[19964, 497, 489, 9, 52, "Input",ExpressionUUID->"c3617e57-6c49-48a8-b376-6334fda372e0"],
Cell[20456, 508, 707, 13, 34, "Output",ExpressionUUID->"2900619d-642f-45b6-ba2e-c61a04ea6c13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21200, 526, 746, 19, 115, "Input",ExpressionUUID->"d472d2a6-738e-4752-8342-0b011a6cbff0"],
Cell[21949, 547, 672, 12, 34, "Output",ExpressionUUID->"e7ca616e-8eb6-4232-882c-732ee11bfd2b"],
Cell[22624, 561, 581, 12, 34, "Output",ExpressionUUID->"e94b436f-c0b1-438d-88ab-e060b45f5012"],
Cell[23208, 575, 2384, 72, 61, "Output",ExpressionUUID->"05b5ff71-04d9-468f-9ec5-5021be32ab84"]
}, Open  ]],
Cell[25607, 650, 596, 14, 52, "Input",ExpressionUUID->"5087bd81-e0b9-496e-8fce-4c9d3adf5178"],
Cell[26206, 666, 522, 10, 52, "Input",ExpressionUUID->"7805864e-00fa-4328-a00e-98161d9b9619"],
Cell[CellGroupData[{
Cell[26753, 680, 214, 4, 30, "Input",ExpressionUUID->"bb964e2d-02a5-4dbb-ba51-020fc2deebb2"],
Cell[26970, 686, 20968, 481, 95, "Output",ExpressionUUID->"5baf63fd-1c55-4566-ad2c-c1eb91108152"]
}, Open  ]]
}, Open  ]]
}
]
*)

